// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of ThingTalk
//
// Copyright 2017-2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>

{
const Ast = require('../ast');
const { parseDate } = require('../date_utils');
}

/**
 * Differences with the actual NN Grammar (as written in
 * almond-nnparser/grammar/thingtalk.py):
 *
 * - almond-nnparser's grammar distinguishes $get and $do, while
 *   while this one uses just $call
 *   almond-nnparser can do that because it knows the full list of
 *   gets and dos (and knows that they don't interset), whereas here
 *   we have a single FUNCTION token
 * - almond-nnparser's grammar is typed around parameter types and
 *   constants, this one is not because otherwise it would be too unwieldly
 *   to write
 * - almond-nnparser uses different terminals for <entity>_i because
 *   it autogenerates the grammar; this grammar uses a single terminal
 *   <entity> plus a lexical analysis step because I was too lazy to write
 *   down all cases by hand
 *
 * Missing features, compared with full TT:
 * - single statement
 * - no complex selectors
 * - no remote primitives (yet)
 * - no declarations
 * - no alias (in aggregate and as a table/stream operator)
 * - no compute
 *
 * Differences with full TT:
 * - all filter operators are infix
 * - multiple parameter passings are prefixed with on in a join
 * - function names are one token
 * - parameter names are prefixed with param:
 * - enum choices are prefixed with enum:
 * - units are prefixed with unit:
 * - relative locations are prefixed with location:
 *
 * What to keep in mind when writing the grammar:
 * - shifts are cheap, reduces are expensive
 * - adding more symbols to a rule only increases the number of shifts
 * - adding more non-terminals to the grammar increases the number of
 *   reduces
 * - splitting a rule into multiple non-terminals increases the number of
 *   reduces
 * - the breadth of reduces matters too
 * - the overall number of rules affects the breadth of reduces
 */

input = {
    program;
    'bookkeeping' 'special' s:SPECIAL => new Ast.Input.Bookkeeping(null, new Ast.BookkeepingIntent.Special(null, s.value));
    'bookkeeping' 'answer' c:value => new Ast.Input.Bookkeeping(null, new Ast.BookkeepingIntent.Answer(null, c));
    'bookkeeping' 'filter' f:filter => new Ast.Input.Bookkeeping(null, new Ast.BookkeepingIntent.Predicate(null, f));
    'bookkeeping' 'category' c:command_category => new Ast.Input.Bookkeeping(null, new Ast.BookkeepingIntent.CommandList(null, new Ast.Value.Undefined(true), c));
    'bookkeeping' 'commands' c:command_category d:constant_Entity__tt__device => new Ast.Input.Bookkeeping(null, new Ast.BookkeepingIntent.CommandList(null, d, c));
    'bookkeeping' 'choice' n:literal_integer => new Ast.Input.Bookkeeping(null, new Ast.BookkeepingIntent.Choice(null, n));

    'policy' p:policy => p;

    dialogue_state;
}

literal_integer = {
    '0' => 0;
    '1' => 1;
    n:LITERAL_INTEGER => n.value;
}

command_category = {
    'online' => 'online';
    'physical' => 'physical';
    'data' => 'data';
    'media' => 'media';
    'home' => 'home';
    'social-network' => 'social-network';
    'communication' => 'communication';
    'data-management' => 'data-management';
    'health' => 'health';
    'service' => 'service';
}

dialogue_state = {
    '$dialogue' dialogueAct:FUNCTION ';' history:dialogue_history_item_list => {
        return new Ast.DialogueState(null, dialogueAct.value.kind, dialogueAct.value.channel, null, history);
    };
    '$dialogue' dialogueAct:FUNCTION pnames:out_param_list ';' history:dialogue_history_item_list => {
        return new Ast.DialogueState(null, dialogueAct.value.kind, dialogueAct.value.channel, pnames.map((p) => p.name), history);
    };

    '$dialogue' dialogueAct:FUNCTION ';' => {
        return new Ast.DialogueState(null, dialogueAct.value.kind, dialogueAct.value.channel, null, []);
    };
    '$dialogue' dialogueAct:FUNCTION pnames:out_param_list ';' => {
        return new Ast.DialogueState(null, dialogueAct.value.kind, dialogueAct.value.channel, pnames.map((p) => p.name), []);
    };
}

dialogue_history_item_list = {
    item:dialogue_history_item => [item];
    list:dialogue_history_item_list item:dialogue_history_item => {
        list.push(item);
        return list;
    };
}

dialogue_history_item = {
    rule:rule ';' => new Ast.DialogueHistoryItem(null, rule, null, 'accepted');

    // note: the syntax here is very hard-coded because we don't want the AST
    // to be generic, otherwise it's hard to manipulate

    // results
    rule:rule results:dialogue_result_annotation_bag ';' => new Ast.DialogueHistoryItem(null, rule, results, 'confirmed');

    // confirm
    rule:rule '#[' 'confirm' '=' venum:ENUM ']' ';' => new Ast.DialogueHistoryItem(null, rule, null, venum.value);
}

dialogue_result_annotation_list = {
    ann:dialogue_result_annotation => [ann];

    list:dialogue_result_annotation_list ann:dialogue_result_annotation => list.concat([ann]);
}

dialogue_result_annotation_bag = {
    list:dialogue_result_annotation_list => {
        let results, _error, more, count;

        for (let [key, value] of list) {
            switch (key) {
            case 'results':
                if (results !== undefined)
                    return $.error(`Duplicate history annotation #[results]`);
                results = value;
                break;
            case 'error':
                if (_error !== undefined)
                    return $.error(`Duplicate history annotation #[results]`);
                _error = value;
                break;
            case 'more':
                if (more !== undefined)
                    return $.error(`Duplicate history annotation #[more]`);
                more = value;
                break;
            case 'count':
                if (count !== undefined)
                    return $.error(`Duplicate history annotation #[count]`);
                count = value;
                break;
            }
        }
        if (results === undefined)
            return $.error(`Missing history annotation #[results]`);
        if (count === undefined)
            count = new Ast.Value.Number(results.length);

        return new Ast.DialogueHistoryResultList(null, results, count, more, _error);
    };
}

dialogue_result_annotation = {
    '#[' 'results' '=' results:dialogue_result_list ']' => ['results', results];
    '#[' 'count' '=' count:value ']' => ['count', count];
    '#[' 'more' '=' 'true' ']' => ['more', true];
    '#[' 'error' '=' error:value ']' => ['error', error];
}

dialogue_result_list = {
    '[' ']' => [];
    '[' list:dialogue_result_list_nonempty ']' => list;
}

dialogue_result_list_nonempty = {
    value:object_literal_value => [new Ast.DialogueHistoryResultItem(null, value.value)];
    list:dialogue_result_list ',' value:object_literal_value => {
        list.push(new Ast.DialogueHistoryResultItem(null, value.value));
        return list;
    };
}

program = {
    rule:rule => new Ast.Program(null, [], [], [rule], null);
    'executor' '=' user:value ':' rule => {
        return new Ast.Program(null, [], [], [rule], user);
    };
}

policy = {
    'true' ':' policy:policy_body => policy;
    user:filter ':' policy:policy_body => {
        const clone = policy.clone();
        clone.principal = user;
        return clone;
    };
}

policy_body = {
    'now' '=>' action:policy_fn => {
        return new Ast.PermissionRule(null, Ast.BooleanExpression.True, Ast.PermissionFunction.Builtin, action);
    };
    query:policy_fn '=>' 'notify' => {
        return new Ast.PermissionRule(null, Ast.BooleanExpression.True, query, Ast.PermissionFunction.Builtin);
    };
    query:policy_fn '=>' action:policy_fn => {
        return new Ast.PermissionRule(null, Ast.BooleanExpression.True, query, action);
    };
}

policy_fn = {
    '*' => Ast.PermissionFunction.Star;
    klass:CLASS_STAR => new Ast.PermissionFunction.ClassStar(null, klass.value);
    fn:FUNCTION => new Ast.PermissionFunction.Specified(null, fn.value.kind, fn.value.channel, Ast.BooleanExpression.True, null);
    fn:FUNCTION 'filter' filter => new Ast.PermissionFunction.Specified(null, fn.value.kind, fn.value.channel, filter, null);
}

rule = {
    stream '=>' action => new Ast.Statement.Rule(null, stream, [action]);
    'now' '=>' table '=>' action => new Ast.Statement.Command(null, table, [action]);
    'now' '=>' action => new Ast.Statement.Command(null, null, [action]);

    rule 'on' pp:param_passing => {
        rule = rule.clone();
        rule.actions[0].invocation.in_params.push(pp);
        return rule;
    };
}

aggr_op = {
    'min' => 'min';
    'max' => 'max';
    'sum' => 'sum';
    'avg' => 'avg';
}

scalar_op = {
    'distance' => 'distance';
}

table = {
    call => new Ast.Table.Invocation(null, call, null);
    '(' table ')' 'filter' filter => {
        return new Ast.Table.Filter(null, table, filter, table.schema);
    };

    'aggregate' op:aggr_op pname:PARAM_NAME 'of' '(' table ')' => new Ast.Table.Aggregation(null, table, pname.value, op, null, null);
    'aggregate' 'count' 'of' '(' table ')'                    => new Ast.Table.Aggregation(null, table, '*', 'count', null, null);

    'sort' pname:PARAM_NAME 'asc' 'of' '(' table ')'           => new Ast.Table.Sort(null, table, pname.value, 'asc', null);
    'sort' pname:PARAM_NAME 'desc' 'of' '(' table ')'          => new Ast.Table.Sort(null, table, pname.value, 'desc', null);
    '(' table ')' '[' indices:array_literal_values ']'       => new Ast.Table.Index(null, table, indices, null);
    '(' table ')' '[' base:value ':' delta:value ']'    => new Ast.Table.Slice(null, table, base, delta, null);

    '[' pnames:out_param_list ']' 'of' '(' table ')'          => new Ast.Table.Projection(null, table, pnames.map((p) => p.name), null);

    'compute' expr:non_ambiguous_value 'of' '(' table ')'       => new Ast.Table.Compute(null, table, expr, null, null);

    table_join;
}

table_join = {
    '(' t1:table ')' 'join' '(' t2:table ')' => new Ast.Table.Join(null, t1, t2, [], null);
    join:table_join 'on' pp:param_passing => {
        join = join.clone();
        join.in_params.push(pp);
        return join;
    };
}

stream = {
    'timer' 'base' '=' base:value ',' 'interval' '=' interval:value => new Ast.Stream.Timer(null, base, interval, null, null);
    'timer' 'base' '=' base:value ',' 'interval' '=' interval:value ',' 'frequency' '=' frequency:value => new Ast.Stream.Timer(null, base, interval, frequency, null);
    'attimer' 'time' '=' time:value => new Ast.Stream.AtTimer(null, time.isArray ? time.value : [time], null, null);
    'attimer' 'time' '=' time:value ',' 'expiration_date' '=' expiration_date:value => new Ast.Stream.AtTimer(null, time.isArray ? time.value : [time], expiration_date, null);

    'monitor' '(' table ')' => new Ast.Stream.Monitor(null, table, null, null);
    'monitor' '(' table ')' 'on' 'new' pname:out_param => {
        return new Ast.Stream.Monitor(null, table, [pname.name], null);
    };

    'monitor' '(' table ')' 'on' 'new' '[' pnames:out_param_list ']' => {
        return new Ast.Stream.Monitor(null, table, pnames.map((p) => p.name), null);
    };

    'edge' '(' stream ')' 'on' filter => {
        return new Ast.Stream.EdgeFilter(null, stream, filter, null);
    };

    // edge on true is the equivalent of "only once"
    'edge' '(' stream ')' 'on' 'true' => new Ast.Stream.EdgeFilter(null, stream, Ast.BooleanExpression.True, null);

    '[' pnames:out_param_list ']' 'of' '(' stream ')'          => new Ast.Stream.Projection(null, stream, pnames.map((p) => p.name), null);

    'compute' expr:non_ambiguous_value 'of' '(' stream ')'       => new Ast.Stream.Compute(null, stream, expr, null, null);

    stream_join;
}

stream_join = {
    '(' stream ')' '=>' '(' table ')' => new Ast.Stream.Join(null, stream, table, [], null);
    '(' stream ')' 'join' '(' table ')' => new Ast.Stream.Join(null, stream, table, [], null);
    join:stream_join 'on' pp:param_passing => {
        join = join.clone();
        join.in_params.push(pp);
        return join;
    };
}

action = {
    'notify' => new Ast.Action.Notify(null, 'notify', null);
    'return' => new Ast.Action.Notify(null, 'return', null);
    call => new Ast.Action.Invocation(null, call, null);
}

selector = {
    fn:FUNCTION => [new Ast.Selector.Device(null, fn.value.kind, null, null), fn.value.channel];

    selector attr:device_attribute => {
        const [sel,] = selector;
        if (attr.name === 'id')
            sel.id = attr.value.toJS();
        else if (attr.name === 'all')
            sel.all = attr.value.toJS();
        else
            sel.attributes.push(attr);
        return selector;
    };
}

device_attribute = {
    pname:ATTRIBUTE_NAME '=' v:value => new Ast.InputParam(null, pname.value, v);
}

call = {
    selector => {
        const [sel, chan] = selector;
        return new Ast.Invocation(null, sel, chan, [], null);
    };
    inv:call ip:const_param => {
        inv = inv.clone();
        inv.in_params.push(ip);
        return inv;
    };
}

param_passing = {
    pname:PARAM_NAME '=' out_param => new Ast.InputParam(null, pname.value, out_param);
    pname:PARAM_NAME '=' 'event' => new Ast.InputParam(null, pname.value, new Ast.Value.Event(null));
}

const_param = pname:PARAM_NAME '=' v:value => new Ast.InputParam(null, pname.value, v);

out_param = pname:PARAM_NAME => new Ast.Value.VarRef(pname.value);

out_param_list = {
    pname:out_param => [pname];
    list:out_param_list ',' pname:out_param => list.concat(pname);
}

// note that $filter is not recursive!
// it must be in CNF form
// also note that and takes priority over or
// this is the opposite of regular TT (which copies JS in that respect)
// because most filters are just a list of
// "condition and this or that and foo or bar"
// to be read as
// "condition and (this or that) and (foo or bar)"
filter = {
    or_filter;
    f1:filter 'and' f2:or_filter => new Ast.BooleanExpression.And(null, [f1, f2]);
}

or_filter = {
    unary_filter;
    f1:or_filter 'or' f2:unary_filter => new Ast.BooleanExpression.Or(null, [f1, f2]);
}

unary_filter = {
    atom_filter;
    'not' f:atom_filter => new Ast.BooleanExpression.Not(null, f);
}

atom_filter = {
    'true' pname:PARAM_NAME => new Ast.BooleanExpression.DontCare(null, pname.value);

    pname:PARAM_NAME op:comparison_op rhs:value => {
        return new Ast.BooleanExpression.Atom(null, pname.value, op, rhs);
    };
    lhs:non_ambiguous_value op:comparison_op rhs:value => {
        if (lhs.isVarRef)
            return new Ast.BooleanExpression.Atom(null, lhs.name, op, rhs);
        else
            return new Ast.BooleanExpression.Compute(null, lhs, op, rhs);
    };
    fn:call '{' filter '}' => {
        return new Ast.BooleanExpression.External(null, fn.selector, fn.channel, fn.in_params, filter, null);
    };
}

/*
aggregate_expression = {
    'count' '(' pname:PARAM_NAME ')' => {
        const list = new Ast.ListExpression(null, pname.value, null);
        return new Ast.ScalarExpression.Aggregation(null, 'count', '*', list);
    };

    'count' '(' pname:PARAM_NAME 'filter' filter:filter ')' => {
        const list = new Ast.ListExpression(null, pname.value, filter);
        return new Ast.ScalarExpression.Aggregation(null, 'count', '*', list);
    };

    op:aggr_op '(' pname:PARAM_NAME ')' => {
        const list = new Ast.ListExpression(null, pname.value, null);
        return new Ast.ScalarExpression.Aggregation(null, op, null, list);
    };

    op:aggr_op '(' pname:PARAM_NAME 'filter' filter:filter ')' => {
        const list = new Ast.ListExpression(null, pname.value, filter);
        return new Ast.ScalarExpression.Aggregation(null, op, null, list);
    };

    op:aggr_op '(' field:PARAM_NAME 'of' pname:PARAM_NAME ')' => {
        const list = new Ast.ListExpression(null, pname.value, null);
        return new Ast.ScalarExpression.Aggregation(null, op, field.value, list);
    };

    op:aggr_op '(' field:PARAM_NAME 'of' pname:PARAM_NAME 'filter' filter:filter ')' => {
        const list = new Ast.ListExpression(null, pname.value, filter);
        return new Ast.ScalarExpression.Aggregation(null, op, field.value, list);
    };
}
*/

/*
scalar_expression = {
    op:scalar_op '(' operand_list ')' => {
        return new Ast.ScalarExpression.Derived(null, op, operand_list);
    };
    'filter' '(' pname:PARAM_NAME 'filter' filter:filter ')' => {
        const list = new Ast.ListExpression(null, pname.value, filter);
        return new Ast.ScalarExpression.Filter(null, list);
    };
}
*/

operand_list = {
    value => [value];
    list:operand_list ',' value => {
        list.push(value);
        return list;
    };
}

comparison_op = {
    '==';
    '>=';
    '<=';
    '=~';
    '~=';
    'starts_with';
    'ends_with';
    'prefix_of';
    'suffix_of';
    'contains';
    'contains~';
    '~contains';
    'in_array';
    'in_array~';
    '~in_array';
}

// to avoid ambiguity caused by the "true" boolean constant and the "true" boolean expression
// and the `PARAM_NAME of ...` value (array field) and the `PARAM_NAME of ...` table (projection)
// we need to force certain expressions not to be constants or raw PARAM_NAMEs
// to do that, we need to duplicate the grammar
non_ambiguous_value = {
    nc_add_expr;
}

nc_add_expr = {
    nc_mul_expr;

    lhs:nc_add_expr '+' rhs:nc_mul_expr => new Ast.Value.Computation('+', [lhs, rhs]);
    lhs:nc_add_expr '-' rhs:nc_mul_expr => new Ast.Value.Computation('-', [lhs, rhs]);
}
nc_mul_expr = {
    nc_exp_expr;

    lhs:nc_mul_expr '*' rhs:nc_exp_expr => new Ast.Value.Computation('*', [lhs, rhs]);
    lhs:nc_mul_expr '/' rhs:nc_exp_expr => new Ast.Value.Computation('/', [lhs, rhs]);
    lhs:nc_mul_expr '%' rhs:nc_exp_expr => new Ast.Value.Computation('%', [lhs, rhs]);
}
nc_exp_expr = {
    nc_array_field_value;

    lhs:nc_exp_expr '**' rhs:nc_array_field_value => new Ast.Value.Computation('**', [lhs, rhs]);
}

nc_array_field_value = {
    field:PARAM_NAME 'of' value:nc_filter_value => new Ast.Value.ArrayField(value, field.value);

    nc_filter_value;
}

nc_filter_value = {
    nc_primary_value;

    value:nc_primary_value 'filter' '{' filter '}' => new Ast.Value.Filter(value, filter);
}

nc_primary_value = {
    // if we introduce a level of parenthesis, the ambiguity caused by "true"/"false"
    // goes away and we can use constants too
    '(' value ')' => value;

    array_value;
    scalar_function;
    undefined_value;
    context_value;
    object_literal_value;
}

primary_value = {
    nc_primary_value;
    var_ref_value;
    constant_value;
}


value = {
    add_expr;
}

add_expr = {
    mul_expr;

    lhs:add_expr '+' rhs:mul_expr => new Ast.Value.Computation('+', [lhs, rhs]);
    lhs:add_expr '-' rhs:mul_expr => new Ast.Value.Computation('-', [lhs, rhs]);
}
mul_expr = {
    exp_expr;

    lhs:mul_expr '*' rhs:exp_expr => new Ast.Value.Computation('*', [lhs, rhs]);
    lhs:mul_expr '/' rhs:exp_expr => new Ast.Value.Computation('/', [lhs, rhs]);
    lhs:mul_expr '%' rhs:exp_expr => new Ast.Value.Computation('%', [lhs, rhs]);
}
exp_expr = {
    array_field_value;

    lhs:exp_expr '**' rhs:array_field_value => new Ast.Value.Computation('**', [lhs, rhs]);
}

array_field_value = {
    field:PARAM_NAME 'of' value:filter_value => new Ast.Value.ArrayField(value, field.value);

    filter_value;
}

filter_value = {
    primary_value;

    value:primary_value 'filter' '{' filter '}' => new Ast.Value.Filter(value, filter);
}

scalar_function = {
    op:scalar_op '(' operand_list ')' => new Ast.Value.Computation(op, operand_list);
    op:aggr_op '(' value ')' => new Ast.Value.Computation(op, [value]);
    'count' '(' value ')' => new Ast.Value.Computation('count', [value]);
}

undefined_value = {
    'undefined' => new Ast.Value.Undefined(true);
}

var_ref_value = {
    out_param;
}

context_value = {
    ctx:CONTEXT_REF => new Ast.Value.ContextRef(ctx.value.name, ctx.value.type);
}

array_value = {
    '[' ']' => new Ast.Value.Array([]);
    '[' values:array_literal_values ']' => new Ast.Value.Array(values);
}

object_literal_value = {
    '{' '}' => new Ast.Value.Object({});
    '{' values:object_literal_entry_list '}' => new Ast.Value.Object(values);
}

object_literal_entry_list = {
    name:PARAM_NAME '=' value:value => ({ [name.value]: value });
    obj:object_literal_entry_list ',' name:PARAM_NAME '=' value:value => {
        obj[name.value] = value;
        return obj;
    };
}

constant_value = {
    constant_Boolean;
    constant_String;
    constant_Measure;
    tok: DURATION => new Ast.Value.Measure(tok.value.value, tok.value.unit);
    constant_Number;
    constant_Currency;
    constant_Location;
    constant_Date;
    constant_Time;
    constant_Entity__unknown;
    constant_Entity__tt__username;
    constant_Entity__tt__hashtag;
    constant_Entity__tt__phone_number;
    constant_Entity__tt__email_address;
    constant_Entity__tt__path_name;
    constant_Entity__tt__url;
    constant_Entity__tt__device;
    constant_Entity__tt__function;
    constant_Entity__tt__picture;
    constant_Enum;
    slot:SLOT => (slot.value === undefined ? new Ast.Value.Undefined(true) : slot.value);
}

array_literal_values = {
    value => [value];
    array:array_literal_values ',' v:value => array.concat([v]);
}

constant_Boolean = {
    'true' => new Ast.Value.Boolean(true);
    'false' => new Ast.Value.Boolean(false);
}

constant_String = {
    '""' => new Ast.Value.String('');
    str:QUOTED_STRING => new Ast.Value.String(str.value);
    '"' str:word_list '"' => new Ast.Value.String(str);
}

word_list = {
    word:WORD => word.value;
    list:word_list word:WORD => list + ' ' + word.value;
}

literal_number = {
    num:NUMBER => num.value;
    num:LITERAL_INTEGER => num.value;
    '1' => 1;
    '0' => 0;
}

constant_Measure = {
    num:literal_number unit:UNIT => new Ast.Value.Measure(num, unit.value);
    tok:MEASURE => new Ast.Value.Measure(tok.value.value, tok.value.unit);
}

constant_Number = {
    num:literal_number => new Ast.Value.Number(num);
    '-' num:literal_number => new Ast.Value.Number(-num);
}

constant_Currency = {
    tok:CURRENCY => new Ast.Value.Currency(tok.value.value, tok.value.unit);
    'new' 'Currency' '(' num:literal_number ',' unit:UNIT ')' => new Ast.Value.Currency(num, unit.value);
    num:literal_number tok:CURRENCY_CODE => new Ast.Value.Currency(num, tok.value);
}
constant_Location = {
    'location:current_location' => new Ast.Value.Location(new Ast.Location.Relative('current_location'));
    'location:home' => new Ast.Value.Location(new Ast.Location.Relative('home'));
    'location:work' => new Ast.Value.Location(new Ast.Location.Relative('work'));
    loc:LOCATION => new Ast.Value.Location(new Ast.Location.Absolute(loc.value.latitude, loc.value.longitude, loc.value.display||null));
    'location:' '"' str:word_list '"' => new Ast.Value.Location(new Ast.Location.Unresolved(str));

    'new' 'Location' '(' lat:constant_Number ',' lon:constant_Number ',' display:constant_String ')' => {
        return new Ast.Value.Location(new Ast.Location.Absolute(lat.value, lon.value, display.value));
    };
    'new' 'Location' '(' lat:constant_Number ',' lon:constant_Number ')' => {
        return new Ast.Value.Location(new Ast.Location.Absolute(lat.value, lon.value, null));
    };
    'new' 'Location' '(' name:constant_String ')' => {
        return new Ast.Value.Location(new Ast.Location.Unresolved(name.value));
    };
}

// start_of/end_of with less than 1h are not supported
// (they don't make sense)
constant_Date = {
    'now' => new Ast.Value.Date(null);
    'new' 'Date' '(' ')' => new Ast.Value.Date(null);
    'new' 'Date' '(' year:literal_number ',' month:literal_number ',' day:literal_number ')' => {
        const d = new Date;
        d.setFullYear(year);
        d.setMonth(month-1);
        d.setDate(day);
        d.setHours(0);
        d.setMinutes(0);
        d.setSeconds(0);
        d.setMilliseconds(0);
        return new Ast.Value.Date(d);
    };
    'new' 'Date' '(' year:literal_number ',' month:literal_number ',' day:literal_number ','
                     hours:literal_number ',' minutes:literal_number ',' seconds:literal_number ')' => {
        const d = new Date;
        d.setFullYear(year);
        d.setMonth(month-1);
        d.setDate(day);
        d.setHours(hours);
        d.setMinutes(minutes);
        d.setSeconds(seconds);
        d.setMilliseconds(0);
        return new Ast.Value.Date(d);
    };
    'new' 'Date' '(' unix:literal_number ')' => {
        const d = new Date;
        d.setTime(unix);
        return new Ast.Value.Date(d);
    };
    'new' 'Date' '(' '"' iso:word_list '"' ')' => {
        return new Ast.Value.Date(new Date(iso));
    };

    'start_of' unit:UNIT => new Ast.Value.Date(new Ast.DateEdge('start_of', unit.value));
    'end_of' unit:UNIT => new Ast.Value.Date(new Ast.DateEdge('end_of', unit.value));
    abs:DATE => new Ast.Value.Date(parseDate(abs.value));
}

// Note that while keeping digits in ranges [0-23],[0-59],[0-59] is not enforced
// here, it is enforced in tonn_converter, rendering it unnecessary to do so here
constant_Time = {
    time:TIME => new Ast.Value.Time(new Ast.Time.Absolute(time.value.hour, time.value.minute, time.value.second||0));
    time:LITERAL_TIME => {
        let tokens = time.value.split(':');
        return new Ast.Value.Time(new Ast.Time.Absolute(parseInt(tokens[0]), parseInt(tokens[1]), parseInt(tokens[2])));
    };
    'time:morning' => new Ast.Value.Time(new Ast.Time.Relative('morning'));
    'time:evening' => new Ast.Value.Time(new Ast.Time.Relative('evening'));
}

// luinet expands this into the various enums in the right
// place for a parameter (as the meaning of an enum changes according
// to the parameter anyway)
constant_Enum = venum:ENUM => new Ast.Value.Enum(venum.value);

constant_Entity__unknown = {
    entity:GENERIC_ENTITY => new Ast.Value.Entity(entity.value.value, entity.value.type, entity.value.display);
    '"' str:word_list '"' type:ENTITY_TYPE => {
        if (type.value === 'tt:hashtag' || type.value === 'tt:username')
            return new Ast.Value.Entity(str, type.value, null);
        else
            return new Ast.Value.Entity(null, type.value, str);
    };
}

constant_Entity__tt__username      = entity:USERNAME      => new Ast.Value.Entity(entity.value, 'tt:username', null);
constant_Entity__tt__hashtag       = entity:HASHTAG       => new Ast.Value.Entity(entity.value, 'tt:hashtag', null);
constant_Entity__tt__url           = entity:URL           => new Ast.Value.Entity(entity.value, 'tt:url', null);
constant_Entity__tt__phone_number  = entity:PHONE_NUMBER  => new Ast.Value.Entity(entity.value, 'tt:phone_number', null);
constant_Entity__tt__email_address = entity:EMAIL_ADDRESS => new Ast.Value.Entity(entity.value, 'tt:email_address', null);
constant_Entity__tt__path_name     = entity:PATH_NAME     => new Ast.Value.Entity(entity.value, 'tt:path_name', null);
constant_Entity__tt__device        = entity:DEVICE        => new Ast.Value.Entity(entity.value, 'tt:device', null);
constant_Entity__tt__function      = entity:FUNCTION      => new Ast.Value.Entity(entity.value.kind + ':' + entity.value.channel, 'tt:function', null);
constant_Entity__tt__picture       = entity:PICTURE       => new Ast.Value.Entity(entity.value, 'tt:picture', null);
